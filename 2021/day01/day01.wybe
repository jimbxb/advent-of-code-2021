
def read_ints(?is:list(int)) use !io {
    ?is = []
    do {
        !read(?i)
        until i < 0
        ?is = [i | is]
    }
    reverse(is, ?is)
}

def {test} `[]`(as:list(A), idx:int, ?a:A) {
    if { idx < 0 :: fail }
    [?a | ?as] = as
    if { idx > 0 :: ?a = as[idx - 1] }
}

def fold_window(n:int, as:list(int), s0:int, ?s:int) {
    if { as = [?a0 | ?as] & as[n] = ?a1 :: 
        if { a0 < a1 :: incr(!s0) }
        fold_window(n, as, s0, ?s)
    | else :: ?s = s0 }
}

!read_ints(?depths)
!print("Part 1: "); !println(fold_window(0, depths, 0))
!print("Part 2: "); !println(fold_window(2, depths, 0))
