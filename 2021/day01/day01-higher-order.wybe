
def read_ints(?is:list(int)) use !io {
    ?is = []
    do {
        !read(?i)
        until i < 0
        ?is = [i | is]
    }
    reverse(is, ?is)
}

def {test} `[]`(as:list(A), idx:int, ?a:A) {
    idx >= 0
    [?a | ?as] = as
    (idx = 0 | ?a = as[idx - 1])
}

def fold_window(n:int, f:(A,A,!S), as:list(A), !s:S) {
    if { as = [?a0 | ?as] & as[n] = ?a1 :: 
        f(a0, a1, !s)
        fold_window(n, f, as, !s)
    }
}

def solve(n:int, depths:list(int), ?count:int) {
    ?count = 0
    fold_window(n, { if { @ < @ :: incr(!@) } }, depths, !count)
}

!read_ints(?depths)
!print("Part 1: "); !println(solve(0, depths))
!print("Part 2: "); !println(solve(2, depths))
